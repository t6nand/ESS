   1              		.cpu cortex-m4
   2              		.eabi_attribute 27, 1
   3              		.eabi_attribute 20, 1
   4              		.eabi_attribute 21, 1
   5              		.eabi_attribute 23, 3
   6              		.eabi_attribute 24, 1
   7              		.eabi_attribute 25, 1
   8              		.eabi_attribute 26, 1
   9              		.eabi_attribute 30, 6
  10              		.eabi_attribute 34, 1
  11              		.eabi_attribute 18, 4
  12              		.file	"PartB.c"
  13              		.text
  14              	.Ltext0:
  15              		.cfi_sections	.debug_frame
  16              		.comm	dot_duration,1,1
  17              		.comm	dash_duration,2,2
  18              		.comm	letter_spacing,2,2
  19              		.comm	word_spacing,2,2
  20              		.comm	global_sys_tick_counter,4,4
  21              		.comm	button1_state,1,1
  22              		.comm	button2_state,1,1
  23              		.global	button1_previous_time
  24              		.bss
  25              		.align	2
  28              	button1_previous_time:
  29 0000 00000000 		.space	4
  30              		.global	button1_first_press
  31              		.align	2
  34              	button1_first_press:
  35 0004 00000000 		.space	4
  36              		.global	time_between_two_button1_press
  37              		.align	2
  40              	time_between_two_button1_press:
  41 0008 00000000 		.space	4
  42              		.comm	boot_time,4,4
  43              	has_string_transmitted:
  44 000c 00       		.space	1
  46              		.global	print_time_once
  49              	print_time_once:
  50 000d 00       		.space	1
  51              		.global	print_zero_once
  54              	print_zero_once:
  55 000e 00       		.space	1
  56              		.global	button1_counter
  57 000f 00       		.align	2
  60              	button1_counter:
  61 0010 00000000 		.space	4
  62              	prev_button1_state:
  63 0014 00       		.space	1
  65              	prev_button2_state:
  66 0015 00       		.space	1
  68              		.section	.rodata
  69              		.align	2
  70              	.LC0:
  71 0000 3000     		.ascii	"0\000"
  72              		.section	.text.main,"ax",%progbits
  73              		.align	1
  74              		.global	main
  75              		.syntax unified
  76              		.thumb
  77              		.thumb_func
  78              		.fpu fpv4-sp-d16
  80              	main:
  81              	.LFB128:
  82              		.file 1 "PartB.c"
   1:PartB.c       **** /**
   2:PartB.c       **** *	Created By: Tapan Sharma
   3:PartB.c       **** *	Matrikulation Number: 03712841
   4:PartB.c       **** *   
   5:PartB.c       **** *   Assignment:		1. Use Button1 to transmit Morse equivalent "I CAN MORSE" using LED1. 
   6:PartB.c       **** *							2. Use Button2 to calculate time between last & second last button presses to display it in
   7:PartB.c       **** */
   8:PartB.c       **** 
   9:PartB.c       **** /**************************************************************************************************
  10:PartB.c       **** 																							HEADER FILES																															
  11:PartB.c       **** ***************************************************************************************************
  12:PartB.c       **** 
  13:PartB.c       **** #include "morse_definition.h"
  14:PartB.c       **** #include "timer_config.h"
  15:PartB.c       **** #include "button_state.h"
  16:PartB.c       **** #include "utils.h"
  17:PartB.c       **** 
  18:PartB.c       **** /**************************************************************************************************
  19:PartB.c       **** 																							STANDARD DEFINITIONS, MACROS, DECLARATIONS AND GLOBAL CONSTANTS				
  20:PartB.c       **** ***************************************************************************************************
  21:PartB.c       **** 
  22:PartB.c       **** uint32_t button1_previous_time = 0;
  23:PartB.c       **** uint32_t button1_first_press = 0;
  24:PartB.c       **** uint32_t time_between_two_button1_press = 0;
  25:PartB.c       **** uint32_t boot_time;
  26:PartB.c       **** static bool has_string_transmitted = false;
  27:PartB.c       **** bool print_time_once = false;
  28:PartB.c       **** bool print_zero_once = false;
  29:PartB.c       **** uint32_t button1_counter = 0;
  30:PartB.c       **** 
  31:PartB.c       **** 
  32:PartB.c       **** static bool prev_button1_state = false;
  33:PartB.c       **** static bool prev_button2_state = false;
  34:PartB.c       ****  
  35:PartB.c       **** /**************************************************************************************************
  36:PartB.c       **** 																							FUNCTION DEFINITIONS														
  37:PartB.c       **** ***************************************************************************************************
  38:PartB.c       **** 
  39:PartB.c       **** /**
  40:PartB.c       **** *	Main function of PartB of Assignment. 
  41:PartB.c       **** */
  42:PartB.c       **** int main (void) {
  83              		.loc 1 42 0
  84              		.cfi_startproc
  85              		@ args = 0, pretend = 0, frame = 16
  86              		@ frame_needed = 1, uses_anonymous_args = 0
  87 0000 80B5     		push	{r7, lr}
  88              	.LCFI0:
  89              		.cfi_def_cfa_offset 8
  90              		.cfi_offset 7, -8
  91              		.cfi_offset 14, -4
  92 0002 84B0     		sub	sp, sp, #16
  93              	.LCFI1:
  94              		.cfi_def_cfa_offset 24
  95 0004 00AF     		add	r7, sp, #0
  96              	.LCFI2:
  97              		.cfi_def_cfa_register 7
  43:PartB.c       **** 	
  44:PartB.c       **** 	// 1. Initialise System Clock.
  45:PartB.c       **** 	init_sys_tick();
  98              		.loc 1 45 0
  99 0006 FFF7FEFF 		bl	init_sys_tick
  46:PartB.c       **** 	
  47:PartB.c       **** 	// 2. Capture Boot Time.
  48:PartB.c       **** 	boot_time = get_current_time();
 100              		.loc 1 48 0
 101 000a FFF7FEFF 		bl	get_current_time
 102 000e 0246     		mov	r2, r0
 103 0010 714B     		ldr	r3, .L29
 104 0012 1A60     		str	r2, [r3]
  49:PartB.c       **** 	
  50:PartB.c       **** 	// 3. Initialise I/O
  51:PartB.c       **** 	init_GPIO();
 105              		.loc 1 51 0
 106 0014 FFF7FEFF 		bl	init_GPIO
  52:PartB.c       **** 	init_button_for_input_read();
 107              		.loc 1 52 0
 108 0018 FFF7FEFF 		bl	init_button_for_input_read
  53:PartB.c       **** 	
  54:PartB.c       **** 	// 4. Program Logic
  55:PartB.c       **** 	
  56:PartB.c       **** 	if(button1_counter == 0) {
 109              		.loc 1 56 0
 110 001c 6F4B     		ldr	r3, .L29+4
 111 001e 1B68     		ldr	r3, [r3]
 112 0020 002B     		cmp	r3, #0
 113 0022 02D1     		bne	.L24
  57:PartB.c       **** 				print_time_once = true;
 114              		.loc 1 57 0
 115 0024 6E4B     		ldr	r3, .L29+8
 116 0026 0122     		movs	r2, #1
 117 0028 1A70     		strb	r2, [r3]
 118              	.L24:
 119              	.LBB2:
  58:PartB.c       **** 		}
  59:PartB.c       **** 		
  60:PartB.c       **** 	while (1) {
  61:PartB.c       **** 		uint32_t current_time_ms = get_current_time();
 120              		.loc 1 61 0
 121 002a FFF7FEFF 		bl	get_current_time
 122 002e 7860     		str	r0, [r7, #4]
  62:PartB.c       **** 		bool button1_state = get_button1_state();
 123              		.loc 1 62 0
 124 0030 FFF7FEFF 		bl	get_button1_state
 125 0034 0346     		mov	r3, r0
 126 0036 FB70     		strb	r3, [r7, #3]
  63:PartB.c       **** 		bool button2_state = get_button2_state();
 127              		.loc 1 63 0
 128 0038 FFF7FEFF 		bl	get_button2_state
 129 003c 0346     		mov	r3, r0
 130 003e BB70     		strb	r3, [r7, #2]
  64:PartB.c       **** 		
  65:PartB.c       **** 		if (button1_state && prev_button1_state) {
 131              		.loc 1 65 0
 132 0040 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 133 0042 002B     		cmp	r3, #0
 134 0044 5DD0     		beq	.L3
 135              		.loc 1 65 0 is_stmt 0 discriminator 1
 136 0046 674B     		ldr	r3, .L29+12
 137 0048 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 138 004a 002B     		cmp	r3, #0
 139 004c 59D0     		beq	.L3
  66:PartB.c       **** 			if(!button2_state) {
 140              		.loc 1 66 0 is_stmt 1
 141 004e BB78     		ldrb	r3, [r7, #2]
 142 0050 83F00103 		eor	r3, r3, #1
 143 0054 DBB2     		uxtb	r3, r3
 144 0056 002B     		cmp	r3, #0
 145 0058 24D0     		beq	.L27
  67:PartB.c       **** 				button1_counter++;
 146              		.loc 1 67 0
 147 005a 604B     		ldr	r3, .L29+4
 148 005c 1B68     		ldr	r3, [r3]
 149 005e 0133     		adds	r3, r3, #1
 150 0060 5E4A     		ldr	r2, .L29+4
 151 0062 1360     		str	r3, [r2]
  68:PartB.c       **** 				if(button1_counter == 1) {
 152              		.loc 1 68 0
 153 0064 5D4B     		ldr	r3, .L29+4
 154 0066 1B68     		ldr	r3, [r3]
 155 0068 012B     		cmp	r3, #1
 156 006a 02D1     		bne	.L5
  69:PartB.c       **** 					button1_first_press = current_time_ms;
 157              		.loc 1 69 0
 158 006c 5E4A     		ldr	r2, .L29+16
 159 006e 7B68     		ldr	r3, [r7, #4]
 160 0070 1360     		str	r3, [r2]
 161              	.L5:
  70:PartB.c       **** 				}
  71:PartB.c       **** 				time_between_two_button1_press = current_time_ms - button1_previous_time;
 162              		.loc 1 71 0
 163 0072 5E4B     		ldr	r3, .L29+20
 164 0074 1B68     		ldr	r3, [r3]
 165 0076 7A68     		ldr	r2, [r7, #4]
 166 0078 D31A     		subs	r3, r2, r3
 167 007a 5D4A     		ldr	r2, .L29+24
 168 007c 1360     		str	r3, [r2]
  72:PartB.c       **** 				button1_previous_time = current_time_ms;
 169              		.loc 1 72 0
 170 007e 5B4A     		ldr	r2, .L29+20
 171 0080 7B68     		ldr	r3, [r7, #4]
 172 0082 1360     		str	r3, [r2]
  73:PartB.c       **** 				print_time_once = true;
 173              		.loc 1 73 0
 174 0084 564B     		ldr	r3, .L29+8
 175 0086 0122     		movs	r2, #1
 176 0088 1A70     		strb	r2, [r3]
  74:PartB.c       **** 				if (!has_string_transmitted) {
 177              		.loc 1 74 0
 178 008a 5A4B     		ldr	r3, .L29+28
 179 008c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 180 008e 83F00103 		eor	r3, r3, #1
 181 0092 DBB2     		uxtb	r3, r3
 182 0094 002B     		cmp	r3, #0
 183 0096 30D0     		beq	.L7
  75:PartB.c       **** 					transmit_message();
 184              		.loc 1 75 0
 185 0098 FFF7FEFF 		bl	transmit_message
  76:PartB.c       **** 					has_string_transmitted = true;
 186              		.loc 1 76 0
 187 009c 554B     		ldr	r3, .L29+28
 188 009e 0122     		movs	r2, #1
 189 00a0 1A70     		strb	r2, [r3]
 190 00a2 2AE0     		b	.L7
 191              	.L27:
  77:PartB.c       **** 				}
  78:PartB.c       **** 			} else {
  79:PartB.c       **** 				while(!button2_state) {
 192              		.loc 1 79 0
 193 00a4 00BF     		nop
 194              	.L8:
 195              		.loc 1 79 0 is_stmt 0 discriminator 1
 196 00a6 BB78     		ldrb	r3, [r7, #2]
 197 00a8 83F00103 		eor	r3, r3, #1
 198 00ac DBB2     		uxtb	r3, r3
 199 00ae 002B     		cmp	r3, #0
 200 00b0 F9D1     		bne	.L8
  80:PartB.c       **** 					// Do Nothing. i.e. wait until button2 is released..
  81:PartB.c       **** 				}
  82:PartB.c       **** 				button1_counter++;
 201              		.loc 1 82 0 is_stmt 1
 202 00b2 4A4B     		ldr	r3, .L29+4
 203 00b4 1B68     		ldr	r3, [r3]
 204 00b6 0133     		adds	r3, r3, #1
 205 00b8 484A     		ldr	r2, .L29+4
 206 00ba 1360     		str	r3, [r2]
  83:PartB.c       **** 				if(button1_counter == 1) {
 207              		.loc 1 83 0
 208 00bc 474B     		ldr	r3, .L29+4
 209 00be 1B68     		ldr	r3, [r3]
 210 00c0 012B     		cmp	r3, #1
 211 00c2 02D1     		bne	.L9
  84:PartB.c       **** 					button1_first_press = current_time_ms;
 212              		.loc 1 84 0
 213 00c4 484A     		ldr	r2, .L29+16
 214 00c6 7B68     		ldr	r3, [r7, #4]
 215 00c8 1360     		str	r3, [r2]
 216              	.L9:
  85:PartB.c       **** 				}
  86:PartB.c       **** 				time_between_two_button1_press = current_time_ms - button1_previous_time;
 217              		.loc 1 86 0
 218 00ca 484B     		ldr	r3, .L29+20
 219 00cc 1B68     		ldr	r3, [r3]
 220 00ce 7A68     		ldr	r2, [r7, #4]
 221 00d0 D31A     		subs	r3, r2, r3
 222 00d2 474A     		ldr	r2, .L29+24
 223 00d4 1360     		str	r3, [r2]
  87:PartB.c       **** 				button1_previous_time = current_time_ms;
 224              		.loc 1 87 0
 225 00d6 454A     		ldr	r2, .L29+20
 226 00d8 7B68     		ldr	r3, [r7, #4]
 227 00da 1360     		str	r3, [r2]
  88:PartB.c       **** 				print_time_once = true;
 228              		.loc 1 88 0
 229 00dc 404B     		ldr	r3, .L29+8
 230 00de 0122     		movs	r2, #1
 231 00e0 1A70     		strb	r2, [r3]
  89:PartB.c       **** 				if (!has_string_transmitted) {
 232              		.loc 1 89 0
 233 00e2 444B     		ldr	r3, .L29+28
 234 00e4 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 235 00e6 83F00103 		eor	r3, r3, #1
 236 00ea DBB2     		uxtb	r3, r3
 237 00ec 002B     		cmp	r3, #0
 238 00ee 04D0     		beq	.L7
  90:PartB.c       **** 					transmit_message();
 239              		.loc 1 90 0
 240 00f0 FFF7FEFF 		bl	transmit_message
  91:PartB.c       **** 					has_string_transmitted = true;
 241              		.loc 1 91 0
 242 00f4 3F4B     		ldr	r3, .L29+28
 243 00f6 0122     		movs	r2, #1
 244 00f8 1A70     		strb	r2, [r3]
 245              	.L7:
  92:PartB.c       **** 				}
  93:PartB.c       **** 			}
  94:PartB.c       **** 			delay(50);
 246              		.loc 1 94 0
 247 00fa 3220     		movs	r0, #50
 248 00fc FFF7FEFF 		bl	delay
 249 0100 02E0     		b	.L10
 250              	.L3:
  95:PartB.c       **** 		} else {
  96:PartB.c       **** 			has_string_transmitted = false;
 251              		.loc 1 96 0
 252 0102 3C4B     		ldr	r3, .L29+28
 253 0104 0022     		movs	r2, #0
 254 0106 1A70     		strb	r2, [r3]
 255              	.L10:
  97:PartB.c       **** 		}	
  98:PartB.c       **** 		
  99:PartB.c       **** 		prev_button1_state = button1_state;
 256              		.loc 1 99 0
 257 0108 364A     		ldr	r2, .L29+12
 258 010a FB78     		ldrb	r3, [r7, #3]
 259 010c 1370     		strb	r3, [r2]
 100:PartB.c       **** 		
 101:PartB.c       **** 		if(button2_state && prev_button2_state) {
 260              		.loc 1 101 0
 261 010e BB78     		ldrb	r3, [r7, #2]	@ zero_extendqisi2
 262 0110 002B     		cmp	r3, #0
 263 0112 5CD0     		beq	.L11
 264              		.loc 1 101 0 is_stmt 0 discriminator 1
 265 0114 384B     		ldr	r3, .L29+32
 266 0116 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 267 0118 002B     		cmp	r3, #0
 268 011a 58D0     		beq	.L11
 102:PartB.c       **** 			if (!button1_state) {
 269              		.loc 1 102 0 is_stmt 1
 270 011c FB78     		ldrb	r3, [r7, #3]
 271 011e 83F00103 		eor	r3, r3, #1
 272 0122 DBB2     		uxtb	r3, r3
 273 0124 002B     		cmp	r3, #0
 274 0126 24D0     		beq	.L28
 275              	.LBB3:
 103:PartB.c       **** 				char* message;
 104:PartB.c       **** 				switch(button1_counter) {
 276              		.loc 1 104 0
 277 0128 2C4B     		ldr	r3, .L29+4
 278 012a 1B68     		ldr	r3, [r3]
 279 012c 002B     		cmp	r3, #0
 280 012e 02D0     		beq	.L14
 281 0130 012B     		cmp	r3, #1
 282 0132 03D0     		beq	.L15
 283 0134 0CE0     		b	.L25
 284              	.L14:
 105:PartB.c       **** 					case 0:
 106:PartB.c       **** 							message = "0";
 285              		.loc 1 106 0
 286 0136 314B     		ldr	r3, .L29+36
 287 0138 FB60     		str	r3, [r7, #12]
 107:PartB.c       **** 							break;
 288              		.loc 1 107 0
 289 013a 0FE0     		b	.L16
 290              	.L15:
 108:PartB.c       **** 					case 1:
 109:PartB.c       **** 							message = character_notation_of_number(button1_first_press - boot_time);
 291              		.loc 1 109 0
 292 013c 2A4B     		ldr	r3, .L29+16
 293 013e 1A68     		ldr	r2, [r3]
 294 0140 254B     		ldr	r3, .L29
 295 0142 1B68     		ldr	r3, [r3]
 296 0144 D31A     		subs	r3, r2, r3
 297 0146 1846     		mov	r0, r3
 298 0148 FFF7FEFF 		bl	character_notation_of_number
 299 014c F860     		str	r0, [r7, #12]
 110:PartB.c       **** 							break;
 300              		.loc 1 110 0
 301 014e 05E0     		b	.L16
 302              	.L25:
 111:PartB.c       **** 					default:
 112:PartB.c       **** 							message = character_notation_of_number(time_between_two_button1_press);
 303              		.loc 1 112 0
 304 0150 274B     		ldr	r3, .L29+24
 305 0152 1B68     		ldr	r3, [r3]
 306 0154 1846     		mov	r0, r3
 307 0156 FFF7FEFF 		bl	character_notation_of_number
 308 015a F860     		str	r0, [r7, #12]
 309              	.L16:
 113:PartB.c       **** 				}
 114:PartB.c       **** 				if (print_time_once) {
 310              		.loc 1 114 0
 311 015c 204B     		ldr	r3, .L29+8
 312 015e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 313 0160 002B     		cmp	r3, #0
 314 0162 31D0     		beq	.L18
 115:PartB.c       **** 					transmit_time(message);
 315              		.loc 1 115 0
 316 0164 F868     		ldr	r0, [r7, #12]
 317 0166 FFF7FEFF 		bl	transmit_time
 116:PartB.c       **** 					print_time_once = false;
 318              		.loc 1 116 0
 319 016a 1D4B     		ldr	r3, .L29+8
 320 016c 0022     		movs	r2, #0
 321 016e 1A70     		strb	r2, [r3]
 322 0170 2AE0     		b	.L18
 323              	.L28:
 324              	.LBE3:
 325              	.LBB4:
 117:PartB.c       **** 				} 
 118:PartB.c       **** 			} else {
 119:PartB.c       **** 				while(!button1_state) {
 326              		.loc 1 119 0
 327 0172 00BF     		nop
 328              	.L19:
 329              		.loc 1 119 0 is_stmt 0 discriminator 1
 330 0174 FB78     		ldrb	r3, [r7, #3]
 331 0176 83F00103 		eor	r3, r3, #1
 332 017a DBB2     		uxtb	r3, r3
 333 017c 002B     		cmp	r3, #0
 334 017e F9D1     		bne	.L19
 120:PartB.c       **** 					// Do Nothing. i.e. wait until button1 is released.
 121:PartB.c       **** 				}
 122:PartB.c       **** 				char* message;
 123:PartB.c       **** 				switch(button1_counter) {
 335              		.loc 1 123 0 is_stmt 1
 336 0180 164B     		ldr	r3, .L29+4
 337 0182 1B68     		ldr	r3, [r3]
 338 0184 002B     		cmp	r3, #0
 339 0186 02D0     		beq	.L21
 340 0188 012B     		cmp	r3, #1
 341 018a 03D0     		beq	.L22
 342 018c 0CE0     		b	.L26
 343              	.L21:
 124:PartB.c       **** 					case 0:
 125:PartB.c       **** 							message = "0";
 344              		.loc 1 125 0
 345 018e 1B4B     		ldr	r3, .L29+36
 346 0190 BB60     		str	r3, [r7, #8]
 126:PartB.c       **** 							break;
 347              		.loc 1 126 0
 348 0192 0FE0     		b	.L23
 349              	.L22:
 127:PartB.c       **** 					case 1:
 128:PartB.c       **** 							message = character_notation_of_number(button1_first_press - boot_time);
 350              		.loc 1 128 0
 351 0194 144B     		ldr	r3, .L29+16
 352 0196 1A68     		ldr	r2, [r3]
 353 0198 0F4B     		ldr	r3, .L29
 354 019a 1B68     		ldr	r3, [r3]
 355 019c D31A     		subs	r3, r2, r3
 356 019e 1846     		mov	r0, r3
 357 01a0 FFF7FEFF 		bl	character_notation_of_number
 358 01a4 B860     		str	r0, [r7, #8]
 129:PartB.c       **** 							break;
 359              		.loc 1 129 0
 360 01a6 05E0     		b	.L23
 361              	.L26:
 130:PartB.c       **** 					default:
 131:PartB.c       **** 							message = character_notation_of_number(time_between_two_button1_press);
 362              		.loc 1 131 0
 363 01a8 114B     		ldr	r3, .L29+24
 364 01aa 1B68     		ldr	r3, [r3]
 365 01ac 1846     		mov	r0, r3
 366 01ae FFF7FEFF 		bl	character_notation_of_number
 367 01b2 B860     		str	r0, [r7, #8]
 368              	.L23:
 132:PartB.c       **** 				}
 133:PartB.c       **** 				if(print_time_once) {
 369              		.loc 1 133 0
 370 01b4 0A4B     		ldr	r3, .L29+8
 371 01b6 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 372 01b8 002B     		cmp	r3, #0
 373 01ba 05D0     		beq	.L18
 134:PartB.c       **** 					transmit_time(message);
 374              		.loc 1 134 0
 375 01bc B868     		ldr	r0, [r7, #8]
 376 01be FFF7FEFF 		bl	transmit_time
 135:PartB.c       **** 					print_time_once = false;
 377              		.loc 1 135 0
 378 01c2 074B     		ldr	r3, .L29+8
 379 01c4 0022     		movs	r2, #0
 380 01c6 1A70     		strb	r2, [r3]
 381              	.L18:
 382              	.LBE4:
 136:PartB.c       **** 				}
 137:PartB.c       **** 			}
 138:PartB.c       **** 			delay(50);
 383              		.loc 1 138 0
 384 01c8 3220     		movs	r0, #50
 385 01ca FFF7FEFF 		bl	delay
 386              	.L11:
 139:PartB.c       **** 		}
 140:PartB.c       **** 		
 141:PartB.c       **** 		prev_button2_state = button2_state;
 387              		.loc 1 141 0
 388 01ce 0A4A     		ldr	r2, .L29+32
 389 01d0 BB78     		ldrb	r3, [r7, #2]
 390 01d2 1370     		strb	r3, [r2]
 391              	.LBE2:
  60:PartB.c       **** 		uint32_t current_time_ms = get_current_time();
 392              		.loc 1 60 0
 393 01d4 29E7     		b	.L24
 394              	.L30:
 395 01d6 00BF     		.align	2
 396              	.L29:
 397 01d8 00000000 		.word	boot_time
 398 01dc 00000000 		.word	button1_counter
 399 01e0 00000000 		.word	print_time_once
 400 01e4 14000000 		.word	prev_button1_state
 401 01e8 00000000 		.word	button1_first_press
 402 01ec 00000000 		.word	button1_previous_time
 403 01f0 00000000 		.word	time_between_two_button1_press
 404 01f4 0C000000 		.word	has_string_transmitted
 405 01f8 15000000 		.word	prev_button2_state
 406 01fc 00000000 		.word	.LC0
 407              		.cfi_endproc
 408              	.LFE128:
 410              		.text
 411              	.Letext0:
 412              		.file 2 "/usr/arm-none-eabi/include/machine/_default_types.h"
 413              		.file 3 "/usr/arm-none-eabi/include/sys/_stdint.h"
 414              		.file 4 "/usr/arm-none-eabi/include/sys/lock.h"
 415              		.file 5 "/usr/arm-none-eabi/include/sys/_types.h"
 416              		.file 6 "/usr/lib/gcc/arm-none-eabi/7.3.1/include/stddef.h"
 417              		.file 7 "/usr/arm-none-eabi/include/sys/reent.h"
 418              		.file 8 "/opt/XMClib/XMC_Peripheral_Library_v2.1.16/CMSIS/Include/core_cm4.h"
 419              		.file 9 "/opt/XMClib/XMC_Peripheral_Library_v2.1.16/CMSIS/Infineon/XMC4500_series/Include/system_X
 420              		.file 10 "morse_definition.h"
 421              		.file 11 "timer_config.h"
 422              		.file 12 "button_state.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 PartB.c
                            *COM*:0000000000000001 dot_duration
                            *COM*:0000000000000002 dash_duration
                            *COM*:0000000000000002 letter_spacing
                            *COM*:0000000000000002 word_spacing
                            *COM*:0000000000000004 global_sys_tick_counter
                            *COM*:0000000000000001 button1_state
                            *COM*:0000000000000001 button2_state
     /tmp/ccOGPwxb.s:28     .bss:0000000000000000 button1_previous_time
     /tmp/ccOGPwxb.s:25     .bss:0000000000000000 $d
     /tmp/ccOGPwxb.s:34     .bss:0000000000000004 button1_first_press
     /tmp/ccOGPwxb.s:40     .bss:0000000000000008 time_between_two_button1_press
                            *COM*:0000000000000004 boot_time
     /tmp/ccOGPwxb.s:43     .bss:000000000000000c has_string_transmitted
     /tmp/ccOGPwxb.s:49     .bss:000000000000000d print_time_once
     /tmp/ccOGPwxb.s:54     .bss:000000000000000e print_zero_once
     /tmp/ccOGPwxb.s:60     .bss:0000000000000010 button1_counter
     /tmp/ccOGPwxb.s:62     .bss:0000000000000014 prev_button1_state
     /tmp/ccOGPwxb.s:65     .bss:0000000000000015 prev_button2_state
     /tmp/ccOGPwxb.s:69     .rodata:0000000000000000 $d
     /tmp/ccOGPwxb.s:73     .text.main:0000000000000000 $t
     /tmp/ccOGPwxb.s:80     .text.main:0000000000000000 main
     /tmp/ccOGPwxb.s:397    .text.main:00000000000001d8 $d
                           .group:0000000000000000 wm4.0.7a9f4dea188ccacb7d502cdcabb040c1
                           .group:0000000000000000 wm4.stddef.h.39.99b5021e28f91cdb161c889e07266673
                           .group:0000000000000000 wm4._newlib_version.h.4.875b979a44719054cd750d0952ad3fd6
                           .group:0000000000000000 wm4.features.h.33.5bd1eea2d80518b50f7af0b5ce6750e0
                           .group:0000000000000000 wm4._default_types.h.15.247e5cd201eca3442cbf5404108c4935
                           .group:0000000000000000 wm4._intsup.h.10.cce27fed8484c08a33f522034c30d2b5
                           .group:0000000000000000 wm4._stdint.h.10.c24fa3af3bc1706662bb5593a907e841
                           .group:0000000000000000 wm4.stdint.h.23.d53047a68f4a85177f80b422d52785ed
                           .group:0000000000000000 wm4.stdbool.h.29.07dce69c3b78884144b7f7bd19483461
                           .group:0000000000000000 wm4.newlib.h.8.f6e543eac3f2f65163ba2ffe3b04987b
                           .group:0000000000000000 wm4.ieeefp.h.77.220d9cccac42cd58761758bee2df4ce6
                           .group:0000000000000000 wm4.config.h.220.6cac6a9685cfce5e83c17784171638d9
                           .group:0000000000000000 wm4._ansi.h.31.de524f58584151836e90d8620a16f8e8
                           .group:0000000000000000 wm4.lock.h.2.1461d1fff82dffe8bfddc23307f6484f
                           .group:0000000000000000 wm4._types.h.125.5cf8a495f1f7ef36777ad868a1e32068
                           .group:0000000000000000 wm4.stddef.h.161.5349cb105733e8777bfb0cf53c4e3f34
                           .group:0000000000000000 wm4._types.h.184.03611d4f6b5bec9997bcf4279eceba07
                           .group:0000000000000000 wm4.reent.h.17.90c2574d4acdcfce933db5cb09ff35fe
                           .group:0000000000000000 wm4.cdefs.h.47.14fad0b327eb9dcf106599b738d85132
                           .group:0000000000000000 wm4.string.h.15.dab3980bf35408a4c507182805e2de3a
                           .group:0000000000000000 wm4.stddef.h.161.19e15733342b50ead2919490b095303e
                           .group:0000000000000000 wm4.xmc_device.h.61.ba2d082e12f51240746cffdd60d42b81
                           .group:0000000000000000 wm4.XMC4500.h.55.9aa45b9b5790506b2dcb963e4e7adeaf
                           .group:0000000000000000 wm4.core_cm4.h.32.6c6eb1c8daeca23ce7ba79c8e8120d52
                           .group:0000000000000000 wm4.cmsis_gcc.h.26.91b63349961c35637933e4fba51b867b
                           .group:0000000000000000 wm4.core_cm4.h.172.fdd5a388a160bb6ff767b7d7ee212268
                           .group:0000000000000000 wm4.system_XMC4500.h.42.99124977c10ca8844a71949adbeabd70
                           .group:0000000000000000 wm4.XMC4500.h.208.b340195df97f067735c4c769ba59985a
                           .group:0000000000000000 wm4.xmc_device.h.1460.8860499b404961ffcfbb8d1fefcb2146
                           .group:0000000000000000 wm4.xmc_common.h.92.3f4336a80569affab05a81145b87c2fc

UNDEFINED SYMBOLS
init_sys_tick
get_current_time
init_GPIO
init_button_for_input_read
get_button1_state
get_button2_state
transmit_message
delay
character_notation_of_number
transmit_time
